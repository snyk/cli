{
  "parser": "@typescript-eslint/parser",
  // Pending https://github.com/typescript-eslint/typescript-eslint/issues/389
  // parserOptions: {
  //   project: './tsconfig.json',
  // },
  "env": {
    "node": true,
    "es6": true
  },
  "plugins": ["@typescript-eslint"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:anti-trojan-source/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-empty-function": "warn",

    // non-null assertions compromise the type safety somewhat, but many
    // our types are still imprecisely defined and we don't use noImplicitAny
    // anyway, so for the time being assertions are allowed
    "@typescript-eslint/no-non-null-assertion": "warn",

    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "no-prototype-builtins": "off",
    "require-atomic-updates": "off",
    "no-restricted-imports": [
      "error",
      { "paths": ["lodash"], "patterns": ["lodash/*"] }
    ],
    "no-buffer-constructor": "error"
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "rules": {
        "@typescript-eslint/ban-types": "warn",
        "id-blacklist": ["error", "exports"] // in TS, use "export" instead of Node's "module.exports"
      }
    },
    {
      "files": "*.spec.*",
      "extends": ["plugin:jest/recommended"],
      "rules": {
        "jest/no-done-callback": "warn",
        "jest/valid-title": "warn",
        "jest/no-conditional-expect": "warn",
        "jest/no-try-expect": "warn",
        "jest/no-identical-title": "warn",
        "@typescript-eslint/ban-ts-comment": "warn",
        "jest/no-standalone-expect": [
          "error",
          { "additionalTestBlockFunctions": ["testIf", "describeIf"] }
        ]
      }
    }
  ]
}
